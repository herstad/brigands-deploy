{"version":3,"sources":["PlayingField.js","stateGenerator.js","itemsUtil.js","Orders.js","InfoPane.js","WinDialog.js","movement.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["typeIcons","o","x","mounted","grass","tree","water","rock","dead","farm","crop","planted","getIcon","elem","hp","type","createMatrix","n","arguments","length","undefined","items","matrix","y","createAtPosition","find","item","PlayingFieldCell","_ref","id","dispatch","useContext","ReducerDispatch","react_default","a","createElement","TableCell_default","IconButton_default","onClick","payload","Icon_default","PlayingField","state","className","Table_default","padding","TableBody_default","map","row","TableRow_default","key","PLAYERS","generateState","console","log","generateItems","turn","activePlayerId","selectedId","winner","events","itemId","behaviors","training","generateId","size","units","playerId","ap","genPos","generatePosition","concat","defaultValues","i","push","generateDefaultItems","points","generateRandomMatrix","Object","objectSpread","shift","array","Array","from","keys","flat","shuffleArray","j","Math","floor","random","isPlayer","getSelectedItem","getItemById","getItemsByPlayer","filter","matchPlayer","getItemByXYAndType","selectedItem","findItemByType","getItemsByXY","removeItemById","getEnemyItems","player","flatMap","otherPlayer","inRange","attacker","target","range","abs","updateItemById","updatedItem","updateItemByIdFn","updateItems","predicate","updateItemFn","el","selectedItemHasAp","farmerHasFarm","some","builderId","getButtonColor","itemAction","action","isSelectedAction","TurnButton","_useContext","Button_default","forEach","condition","AttackButton","targetId","_useContext2","color","agentId","DefendButton","_ref2","areaId","_useContext3","BuildFarmButton","_useContext4","PlantCropButton","_useContext5","HarvestCropButton","_useContext6","Orders","Card_default","CardContent_default","enemy","UnitCard","_useContext$state","_getItemById","relativeHp","defaultEvent","Typography_default","LinearProgress_default","variant","value","TrainEventButton","event","FinishTrainEventButton","EventCard","_ref3","EventsInfo","index","InfoPane","WinDialog","Dialog_default","open","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","DialogContentText_default","DialogActions_default","toward","mover","xd","yd","sign","move","direction","_direction","nextPlayer","findIndex","getWinner","isLoser","every","consumeAp","conditionalAction","behaviorTraining","conditionalActions","createBuilding","builder","clearedItems","building","createdTurn","toConsumableArray","plantedShouldGrow","reducer","apItems","grownCrops","newCrops","replacements","obj","replaceItems","slice","consumedState","defender","area","name","eventType","agent","behavior","updatedBehavior","defineProperty","updatedBehaviorState","React","createContext","initialState","Boolean","window","location","hostname","match","ReactDOM","render","_useReducer","useReducer","_useReducer2","slicedToArray","CssBaseline_default","Grid_default","container","justify","spacing","Provider","xs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4973be4.chunk.js","sourcesContent":["import React, {useContext} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport {ReducerDispatch} from \"./App\";\n\nconst typeIcons = {\n  o: 'android',\n  x: 'directions_walk',\n  mounted: 'direction_bike',\n  grass: 'crop_free',\n  tree: 'nature',\n  water: 'waves',\n  rock: 'landscape',\n  dead: 'airline_seat_flat',\n  farm: 'home',\n  crop: 'local_florist',\n  planted: 'minimize',\n\n};\n\nconst getIcon = (elem) => elem.hp < 1 ? typeIcons['dead'] : typeIcons[elem.type] || 'crop_free';\n\nconst createMatrix = (n = 10, items) => {\n  let matrix = [];\n  for (let y = 0; y < n; y++) {\n    matrix[y] = [];\n    for (let x = 0; x < n; x++) {\n      matrix[y][x] = createAtPosition(items, x, y);\n    }\n  }\n  return matrix;\n};\n\nconst createAtPosition = (items = [], x, y) => {\n  return items.find((item) => item.x === x && item.y === y) || {x: x, y: y, type: '.'}\n};\n\nfunction PlayingFieldCell({elem}) {\n  const {dispatch} = useContext(ReducerDispatch);\n  const handleSetSelected = (id) => () => {\n    dispatch({type: 'SET_SELECTED', payload: id});\n  };\n  return (\n    <TableCell>\n      <IconButton\n        onClick={handleSetSelected(elem.id)}><Icon>{getIcon(elem)}</Icon></IconButton>\n    </TableCell>);\n}\n\nexport default function PlayingField() {\n  const {items} = useContext(ReducerDispatch).state;\n  const matrix = createMatrix(10, items);\n  return <div className=\"PlayingField\">\n    <Table padding=\"none\">\n      <TableBody>\n        {\n          (matrix.map(row =>\n            <TableRow key={row[0].y}>{\n              row.map(elem => <PlayingFieldCell key={'x' + elem.x + 'y' + elem.y} elem={elem}/>)}\n            </TableRow>))\n        }\n      </TableBody>\n    </Table>\n  </div>;\n}\n","export const PLAYERS = ['human', 'ai'];\n\nexport const generateState = () => {\n  console.log(\"generate state\");\n\n  const items = generateItems();\n  return {\n    turn: 0,\n    activePlayerId: PLAYERS[0],\n    items,\n    selectedId: items[0].id,\n    winner: undefined,\n    events: [{type: 'ENEMY_SPOTTED', itemId: items[1].id}, {type: 'GAME_STARTED'}],\n    behaviors: {},\n    training: false,\n  };\n};\n\nlet itemId = 0;\n\nexport const generateId = () => {\n  itemId++;\n  return itemId;\n};\n\nconst generateDefaultItems = (size) => {\n  const defaultValues = [];\n  for (let i = 0; i < size; i++) {\n    defaultValues.push({id: generateId(), type: 'grass'});\n  }\n  return defaultValues;\n};\n\nconst generateItems = (size = 10) => {\n  const units = [\n    {id: generateId(), hp: 5, type: 'x', playerId: 'human', ap: 1},\n    {id: generateId(), hp: 5, type: 'o', playerId: 'ai', ap: 1},\n  ];\n\n  const items = [\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'rock'},\n    {id: generateId(), type: 'rock'},\n    {id: generateId(), type: 'rock'},\n    {id: generateId(), type: 'water'},\n    {id: generateId(), type: 'water'},\n    {id: generateId(), type: 'water'},\n  ];\n\n  const genPos = generatePosition(size);\n  return genPos(units).concat(genPos(items.concat(generateDefaultItems(size * size - items.length))));\n};\n\nconst generatePosition = (size) => (items) => {\n  const points = generateRandomMatrix(size);\n  return items.map((item) => ({...item, ...points.shift()}));\n};\n\nconst generateRandomMatrix = (size) => {\n  const array = Array.from(Array(size).keys());\n  const matrix = array.map((x) => {\n    return array.map((y) => {\n      return {x, y};\n    })\n  }).flat();\n  shuffleArray(matrix);\n  return matrix;\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};","import {PLAYERS} from \"./stateGenerator\";\n\nexport const isPlayer = (playerId, item) => item.playerId === playerId;\nexport const matchPlayer = (playerId) => (item) => isPlayer(playerId, item);\nexport const getSelectedItem = (state) => getItemById(state.selectedId, state.items);\nexport const getItemById = (id, items) => items.find((item) => item.id === id);\nexport const getItemsByPlayer = (playerId, items) => items.filter(matchPlayer(playerId));\nexport const getItemsByXY = items => ({x, y}) => items.filter((item) => item.x === x && item.y === y);\nexport const getItemByXYAndType = items => selectedItem => type => findItemByType(getItemsByXY(items)(selectedItem))(type);\nexport const findItemByType = items => type => items.find(item => item.type === type);\nexport const removeItemById = (id, items) => items.filter((item) => item.id !== id);\nexport const getEnemyItems = (state) => {\n  const otherPlayers = PLAYERS.filter((player) => state.activePlayerId !== player);\n  return otherPlayers.flatMap((otherPlayer) => getItemsByPlayer(otherPlayer, state.items));\n};\nexport const inRange = (attacker, target, range = 1) => {\n  return Math.abs(target.x - attacker.x) + Math.abs(target.y - attacker.y) <= range;\n};\nexport const updateItemById = (updatedItem, state) => {\n  const items = state.items.map(updateItemByIdFn(updatedItem));\n  return ({...state, items});\n};\n\nexport const replaceItems = items => replacements => {\n  return items.map(obj => replacements.find(o => o.id === obj.id) || obj);\n};\n\nexport const updateItems = predicate => updatedItem => items => {\n  return items.map(updateItemFn(predicate)(updatedItem));\n};\n\nexport const updateItemFn = predicate => updatedItem => {\n  return el => (predicate(el) ? {...el, ...updatedItem} : el);\n};\n\nexport const replaceItemFn = predicate => updatedItem => {\n  return el => (predicate(el) ? updatedItem : el);\n};\n\nexport const updateItemByIdFn = (updatedItem) => {\n  return updateItemFn(el => updatedItem.id === el.id)(updatedItem);\n};\n\nexport const matchId = (id) => {\n  return (item) => item.id === id;\n};","import React, {useContext} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport {\n  getEnemyItems,\n  getItemById,\n  getItemByXYAndType,\n  getItemsByPlayer,\n  getSelectedItem\n} from \"./itemsUtil\";\nimport {ReducerDispatch} from \"./App\";\n\nconst isSelectedAction = (type, state) => {\n  const itemAction = getItemById(state.selectedId, state.items).action;\n  return itemAction && type === itemAction.type;\n};\n\nconst selectedItemHasAp = (state) => {\n  const selectedItem = getSelectedItem(state);\n  return selectedItem.ap > 0 && selectedItem.playerId === state.activePlayerId;\n};\n\nconst farmerHasFarm = (state) => {\n  return state.items.some((item) => item.type === 'farm' && item.builderId === state.selectedId);\n};\n\nconst getButtonColor = (type, state) => isSelectedAction(type, state) ? 'primary' : 'default';\n\nfunction TurnButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const {items, activePlayerId} = state;\n  const handleEndTurn = (playerId) => () => {\n    getItemsByPlayer(playerId, items)\n      .filter((item) => item.action && item.ap)\n      .forEach((item) => item.condition(state) ? dispatch(item.action) : undefined);\n    dispatch({\n      type: 'END_TURN',\n      payload: playerId\n    })\n  };\n  return (\n    <Button onClick={handleEndTurn(activePlayerId)}>Turn({activePlayerId}): {state.turn}</Button>\n  );\n}\n\nfunction AttackButton({targetId}) {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const condition = selectedItemHasAp;\n  if (!condition(state)) {\n    return null;\n  }\n  const color = getButtonColor('ATTACK', state);\n  const handleAttack = () => {\n    dispatch({\n      type: 'ATTACK',\n      payload: {\n        agentId: state.selectedId,\n        targetId,\n        condition,\n      }\n    })\n  };\n  return (<Button color={color} onClick={handleAttack}>Attack Enemy</Button>);\n}\n\nfunction DefendButton({areaId}) {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const condition = selectedItemHasAp;\n  if (!condition(state)) {\n    return null;\n  }\n  const color = getButtonColor('DEFEND', state);\n  const handleDefend = () => {\n    dispatch({\n      type: 'DEFEND',\n      payload: {\n        agentId: state.selectedId,\n        areaId: areaId,\n        condition,\n      }\n    })\n  };\n  return (<Button color={color} onClick={handleDefend}>Defend Area {areaId}</Button>);\n}\n\nfunction BuildFarmButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n\n  const condition = state => {\n    return selectedItemHasAp(state)\n      && !farmerHasFarm(state)\n      && getItemByXYAndType(state.items)(getSelectedItem(state))('grass');\n  };\n  if (!condition(state)) {\n    return null;\n  }\n  const handleBuildFarm = () => {\n    dispatch({\n      type: 'BUILD_FARM',\n      payload: {\n        agentId: state.selectedId,\n        condition,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handleBuildFarm}>Build farm</Button>);\n}\n\n\nfunction PlantCropButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const condition = state => {\n    return selectedItemHasAp(state)\n      && farmerHasFarm(state)\n      && getItemByXYAndType(state.items)(getSelectedItem(state))('grass');\n  };\n  if (!condition(state)) {\n    return null;\n  }\n  const handlePlantCrop = () => {\n    dispatch({\n      type: 'PLANT_CROP',\n      payload: {\n        agentId: state.selectedId,\n        condition,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handlePlantCrop}>PlantCrop</Button>);\n}\n\nfunction HarvestCropButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const selectedItem = getSelectedItem(state);\n  const target = getItemByXYAndType(state.items)(selectedItem)('crop');\n  const condition = state => {\n    const selectedItem = getSelectedItem(state);\n    const target = getItemByXYAndType(state.items)(selectedItem)('crop');\n    return selectedItemHasAp(state) && !!target;\n  };\n  if (!condition(state)) {\n    return null;\n  }\n  const handleHarvestCrop = () => {\n    dispatch({\n      type: 'HARVEST_CROP',\n      payload: {\n        agentId: state.selectedId,\n        targetId: target.id,\n        condition,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handleHarvestCrop}>HarvestCrop</Button>);\n}\n\nexport default function Orders() {\n  const {state} = useContext(ReducerDispatch);\n  return <div>\n    <Card>\n      <CardContent>\n        <TurnButton/>\n        {\n          getEnemyItems(state).map((enemy) => <AttackButton key={enemy.id} targetId={enemy.id}/>)\n        }\n        <DefendButton areaId={5}/>\n        <BuildFarmButton/>\n        <PlantCropButton/>\n        <HarvestCropButton/>\n      </CardContent>\n    </Card>\n  </div>\n}\n","import React, {useContext} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport {getItemById} from \"./itemsUtil\";\nimport {ReducerDispatch} from \"./App\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction UnitCard() {\n  const {selectedId, items} = useContext(ReducerDispatch).state;\n  if (selectedId === undefined) {\n    return null;\n  }\n  const {id, playerId, x, y, hp, ap, type} = getItemById(selectedId, items);\n  const maxHp = 5;\n  const relativeHp = hp / maxHp * 100;\n  const defaultEvent = {type: 'DEFAULT_EVENT', itemId: selectedId};\n  return (\n    <Card>\n      <CardContent>\n        <Typography>id:{id}</Typography>\n        <Typography>player:{playerId}</Typography>\n        <Typography>x:{x}</Typography>\n        <Typography>y:{y}</Typography>\n        <Typography>hp:{hp}</Typography>\n        <Typography>ap:{ap}</Typography>\n        <Typography>type:{type}</Typography>\n        <LinearProgress variant=\"determinate\" value={relativeHp}/>\n        <TrainEventButton event={defaultEvent}/>\n        <FinishTrainEventButton/>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction TrainEventButton({event}) {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  if (state.selectedId === undefined) {\n    return null;\n  }\n  const handleTrainEvent = () => {\n    dispatch({\n      type: 'TRAIN_EVENT',\n      payload: {\n        agentId: event.itemId,\n        event,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handleTrainEvent}>Train Default Behavior</Button>);\n}\n\nfunction FinishTrainEventButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  if (state.selectedId === undefined) {\n    return null;\n  }\n  const handleTrainEvent = () => {\n    dispatch({\n      type: 'FINISH_TRAIN_EVENT',\n      payload: {\n        agentId: state.selectedId,\n      }\n    })\n  };\n  return (\n    <Button color='default' onClick={handleTrainEvent}>Finish train Default Behavior</Button>);\n}\n\nfunction EventCard({event}) {\n  const {items} = useContext(ReducerDispatch).state;\n  const {x, y, type} = (event.itemId ? getItemById(event.itemId, items) : {});\n  return (\n    <Card>\n      <CardContent>\n        <Typography>type:{event.type}</Typography>\n        <Typography>x:{x}</Typography>\n        <Typography>y:{y}</Typography>\n        <Typography>itemType:{type}</Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction EventsInfo() {\n  const {events} = useContext(ReducerDispatch).state;\n  return events.map((event, index) => <EventCard key={\"event\" + index} event={event}/>);\n}\n\nexport default function InfoPane() {\n  return <div>\n    <UnitCard/>\n    <EventsInfo/>\n  </div>\n}\n","import React, {useContext} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {ReducerDispatch} from \"./App\";\n\nexport default function WinDialog() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n\n\n  const handleRestart = () => dispatch({type: 'RESTART', payload: undefined});\n  return (\n    <div>\n      <Dialog open={!!state.winner} aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\">\n        <DialogTitle id=\"alert-dialog-title\">{`The winner is ${state.winner}!`}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">Play another round?</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleRestart} color=\"primary\">Yes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","export const toward = target => mover => {\n  const xd = target.x - mover.x;\n  const yd = target.y - mover.y;\n  return Math.abs(xd) > Math.abs(yd) ? {x: Math.sign(xd), y: 0} : {x: 0, y: Math.sign(yd)};\n};\n\nexport const move = (mover, direction) => {\n  const {x, y} = direction(mover);\n  return {...mover, x: (mover.x + x), y: (mover.y + y)}\n};","import {generateId, generateState, PLAYERS} from \"./stateGenerator\";\nimport {\n  getEnemyItems,\n  getItemById,\n  getItemByXYAndType,\n  getItemsByPlayer,\n  inRange,\n  isPlayer,\n  removeItemById,\n  replaceItems,\n  updateItemById,\n  updateItems\n} from \"./itemsUtil\";\nimport {move, toward} from \"./movement\";\n\nconst nextPlayer = (activePlayerId) => {\n  const index = PLAYERS.findIndex((id) => id === activePlayerId);\n  return PLAYERS[(index + 1) % PLAYERS.length];\n};\n\nconst nextTurn = (turn, activePlayerId) => PLAYERS.slice(-1)[0] === activePlayerId ? turn + 1 : turn;\n\nconst getWinner = (state) => {\n  return isLoser('ai', state.items) ? 'human' : isLoser('human', state.items) ? 'ai' : undefined;\n};\n\nconst isLoser = (playerId, items) => {\n  return getItemsByPlayer(playerId, items).every((item) => item.hp <= 0);\n};\n\nconst consumeAp = (action, state) => {\n  const {condition} = action.payload;\n  const selectedItem = {\n    ...getItemById(action.payload.agentId, state.items),\n    ap: 0,\n    action,\n    condition,\n\n  };\n  if (!!selectedItem.training) {\n    const conditionalAction = {action, condition};\n    selectedItem.behaviorTraining.conditionalActions.push(conditionalAction);\n  }\n  return updateItemById(selectedItem, state);\n};\n\nconst createBuilding = (builderId, type, state) => {\n  const builder = getItemById(builderId, state.items);\n  const target = getItemByXYAndType(state.items)(builder)('grass');\n  const clearedItems = removeItemById(target.id, state.items);\n  const building = {\n    id: generateId(),\n    builderId,\n    x: builder.x,\n    y: builder.y,\n    type,\n    createdTurn: state.turn,\n  };\n  return {...state, items: [...clearedItems, building]}\n};\n\nconst plantedShouldGrow = turn => item => item.type === 'planted' && item.createdTurn + 5 <= turn;\n\nexport default (state, action) => {\n  console.log('Action');\n  console.log(action);\n  console.log(state);\n  const {payload} = action;\n  switch (action.type) {\n    case 'END_TURN': {\n      const apItems = updateItems((item) => isPlayer(payload, item))({ap: 1})(state.items);\n      const grownCrops = apItems.filter(plantedShouldGrow(state.turn));\n      const newCrops = updateItems(plantedShouldGrow(state.turn))({type: 'crop',})(grownCrops);\n      const items = replaceItems(apItems)(newCrops);\n      const events = newCrops.map((item) => ({type: 'CROP_GROWN', itemId: item.id}));\n      return {\n        ...state,\n        items,\n        turn: nextTurn(state.turn, state.activePlayerId),\n        activePlayerId: nextPlayer(state.activePlayerId),\n        winner: getWinner(state),\n        events,\n      };\n    }\n    case 'RESTART': {\n      return generateState();\n    }\n    case 'SET_SELECTED': {\n      return {...state, selectedId: payload};\n    }\n    case 'ATTACK': {\n      const {agentId, targetId} = payload;\n      const consumedState = consumeAp(action, state);\n      const attacker = getItemById(agentId, consumedState.items);\n      const target = getItemById(targetId, consumedState.items);\n      if (inRange(attacker, target)) {\n        console.log('target in range!');\n        return updateItemById({...target, hp: target.hp - 1}, consumedState);\n      } else {\n        console.log('target not in range!');\n        return updateItemById(move(attacker, toward(target)), consumedState);\n      }\n    }\n    case 'DEFEND': {\n      const {agentId, areaId} = payload;\n      const consumedState = consumeAp(action, state);\n      const defender = getItemById(agentId, consumedState.items);\n      const area = getItemById(areaId, consumedState.items);\n      const target = getEnemyItems(state).find((enemy) => inRange(defender, enemy));\n      if (!!target) {\n        console.log('target in range!');\n        return updateItemById({...target, hp: target.hp - 1}, consumedState);\n      } else {\n        console.log('target not in range!');\n        return updateItemById(move(defender, toward(area)), consumedState);\n      }\n    }\n    case 'BUILD_FARM': {\n      return createBuilding(payload.agentId, 'farm', consumeAp(action, state));\n    }\n    case 'PLANT_CROP': {\n      return createBuilding(payload.agentId, 'planted', consumeAp(action, state));\n    }\n    case 'HARVEST_CROP': {\n      const consumedState = consumeAp(action, state);\n      const {x, y} = getItemById(payload.targetId, state.items);\n      const grass = {\n        id: generateId(),\n        x,\n        y,\n        type: 'grass',\n      };\n      return {\n        ...consumedState,\n        items: [...removeItemById(payload.targetId, consumedState.items), grass],\n      }\n    }\n    case 'TRAIN_EVENT': {\n      const {agentId, event} = payload;\n      return updateItemById({\n        id: agentId,\n        behaviorTraining: {name: 'farmer', eventType: event.type, conditionalActions: []},\n        training: true,\n      }, state);\n    }\n    case 'FINISH_TRAIN_EVENT': {\n      const {agentId} = payload;\n      const agent = getItemById(agentId, state.items);\n      const behavior = state.behaviors[agent.behaviorTraining.name] || {};\n      const updatedBehavior = {\n        ...behavior,\n        [agent.behaviorTraining.eventType]: {conditionalActions: agent.behaviorTraining.conditionalActions},\n      };\n      const updatedBehaviorState = {\n        ...state,\n        behaviors: {...state.behaviors, [agent.behaviorTraining.name]: updatedBehavior}\n      };\n      return updateItemById({\n        ...agent,\n        behaviorTraining: {},\n        training: false,\n      }, updatedBehaviorState);\n\n    }\n    default:\n      return state;\n  }\n};\n","import React, {useReducer} from 'react';\nimport './App.css';\nimport PlayingField from './PlayingField';\nimport Orders from './Orders';\nimport InfoPane from './InfoPane';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport WinDialog from \"./WinDialog\";\nimport reducer from \"./reducer\";\nimport {generateState} from \"./stateGenerator\";\n\nexport const ReducerDispatch = React.createContext(null);\n\nconst initialState = generateState();\n\nexport default function App() {\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <div className=\"App\">\n      <CssBaseline/>\n      <Grid container justify=\"center\" direction=\"row\" spacing={24}>\n        <ReducerDispatch.Provider value={{state, dispatch}}>\n          <WinDialog/>\n          <Grid item xs>\n            <InfoPane/>\n          </Grid>\n          <Grid item xs>\n            <PlayingField size=\"10\"/>\n          </Grid>\n          <Grid item xs={4}>\n            <Orders/>\n          </Grid>\n        </ReducerDispatch.Provider>\n      </Grid>\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}